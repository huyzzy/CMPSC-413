def search_pattern_naive(pattern, text):
    m = len(pattern)
    n = len(text)
    result = []

    # Loop to slide the pattern over the text one by one
    for i in range(n - m + 1):
        # For current index i, check if the pattern matches
        j = 0
        while j < m and text[i + j] == pattern[j]:
            j += 1

        # If the entire pattern matches the text starting at index i
        if j == m:
            result.append(i)

    # Return result list if matches found, otherwise return [-1]
    if not result:
        return [-1]
    return result  # Now the return line is not combined

# Test cases
txt1 = "This is a CMPSC 413 lab course. Students take this course along with CMPSC 463"
pattern1 = "CMPSC"
print(f"Patterns found at indices (Naive): {search_pattern_naive(pattern1, txt1)}")

txt2 = "This is a CMPSC 413 lab course. Students take this course along with CMPSC 463"
pattern2 = "course"
print(f"Patterns found at indices (Naive): {search_pattern_naive(pattern2, txt2)}")

txt3 = "AABAACAADAABAABAABBBBBAAABDCBA"
pattern3 = "BBBBBA"
print(f"Patterns found at indices (Naive): {search_pattern_naive(pattern3, txt3)}")




def compute_lps(pattern):
    m = len(pattern)
    lps = [0] * m  # Create LPS array for the pattern
    length = 0  # Length of the previous longest prefix suffix
    i = 1

    while i < m:
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1
    return lps

def kmp_search(pattern, text):
    m = len(pattern)
    n = len(text)

    lps = compute_lps(pattern)
    i = 0  # Index for text
    j = 0  # Index for pattern
    result = []

    while i < n:
        if pattern[j] == text[i]:
            i += 1
            j += 1

        if j == m:
            result.append(i - j)
            j = lps[j - 1]
        elif i < n and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    
    if result:
        return result
    else:
        return -1

# Test cases
txt1 = "This is a CMPSC 413 lab course. Students take this course along with CMPSC 463"
pattern1 = "CMPSC"
print(f"Patterns found at indices: {kmp_search(pattern1, txt1)}")

txt2 = "This is a CMPSC 413 lab course. Students take this course along with CMPSC 463"
pattern2 = "course"
print(f"Patterns found at indices: {kmp_search(pattern2, txt2)}")

txt3 = "AABAACAADAABAABAABBBBBAAABDCBA"
pattern3 = "BBBBBA"
print(f"Patterns found at indices: {kmp_search(pattern3, txt3)}")

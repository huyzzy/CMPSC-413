class PriorityQueue:
    def __init__(self, min_queue=True):
        self.queue = []
        self.min_queue = min_queue  # True for min-priority, False for max-priority

    def insert(self, item, priority):
        # Insert the item with the priority
        self.queue.append((priority, item))

    def peek(self):
        if not self.queue:
            raise IndexError("peek from an empty priority queue")
        # Find the item with the highest priority
        best_priority = min(self.queue) if self.min_queue else max(self.queue)
        return best_priority[1]

    def delete(self):
        if not self.queue:
            raise IndexError("delete from an empty priority queue")
        # Find and remove the item with the highest priority
        best_index = 0
        for i in range(1, len(self.queue)):
            if (self.min_queue and self.queue[i][0] < self.queue[best_index][0]) or \
               (not self.min_queue and self.queue[i][0] > self.queue[best_index][0]):
                best_index = i
        return self.queue.pop(best_index)[1]

    def changePriority(self, item, new_priority):
        # Find the item and change its priority
        for i in range(len(self.queue)):
            if self.queue[i][1] == item:
                self.queue[i] = (new_priority, item)
                return
        print(f"Item {item} not found in the priority queue.")


    def display(self):
        print(self.queue)

# Example Usage
pq_min = PriorityQueue(min_queue=True)
pq_max = PriorityQueue(min_queue=False)

# Insertion
pq_min.insert('Task A', 3)
pq_min.insert('Task B', 1)
pq_min.insert('Task C', 2)
pq_min.display()

pq_max.insert('Task A', 3)
pq_max.insert('Task B', 1)
pq_max.insert('Task C', 2)
pq_max.display()

# Peek
print("Min Queue Peek:", pq_min.peek())
print("Max Queue Peek:", pq_max.peek())

# Delete
print("Min Queue Delete:", pq_min.delete())
pq_min.display()

print("Max Queue Delete:", pq_max.delete())
pq_max.display()

# Change Priority
pq_min.changePriority('Task C', 0)
pq_min.display()

pq_max.changePriority('Task A', 4)  # Should now print "Item Task A not found in the priority queue."
pq_max.display()

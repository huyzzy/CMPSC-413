def heapify(arr, n, i, ascending=True):
    # For ascending sort, use max-heap; for descending, use min-heap
    largest_or_smallest = i
    left = 2 * i + 1
    right = 2 * i + 2

    # Compare with left child
    if ascending:
        if left < n and arr[left] > arr[largest_or_smallest]:
            largest_or_smallest = left
        # Compare with right child
        if right < n and arr[right] > arr[largest_or_smallest]:
            largest_or_smallest = right
    else:
        if left < n and arr[left] < arr[largest_or_smallest]:
            largest_or_smallest = left
        # Compare with right child
        if right < n and arr[right] < arr[largest_or_smallest]:
            largest_or_smallest = right

    # If the largest or smallest is not the root
    if largest_or_smallest != i:
        arr[i], arr[largest_or_smallest] = arr[largest_or_smallest], arr[i]
        # Heapify the root
        heapify(arr, n, largest_or_smallest, ascending)

def heap_sort(arr, ascending=True):
    n = len(arr)

    # Build a max-heap (for ascending) or min-heap (for descending)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i, ascending)

    # Extract elements from the heap one by one
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Swap the root with the last element
        heapify(arr, i, 0, ascending)   # Heapify the reduced heap

# Example Usage
arr_asc = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
arr_desc = arr_asc.copy()

# Sorting in ascending order
heap_sort(arr_asc, ascending=True)
print("Sorted in ascending order:", arr_asc)

# Sorting in descending order
heap_sort(arr_desc, ascending=False)
print("Sorted in descending order:", arr_desc)

import heapq
class DisjointSetUnion:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            if self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            elif self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1


def kruskal(n, edges):
    # Sort edges by weight
    edges.sort(key=lambda x: x[2])
    dsu = DisjointSetUnion(n)
    mst = []
    total_weight = 0

    for u, v, weight in edges:
        if dsu.find(u) != dsu.find(v):
            dsu.union(u, v)
            mst.append((u, v, weight))
            total_weight += weight
            if len(mst) == n - 1:
                break

    return mst, total_weight


# Example Graphs
dense_graph = (5, [
    (0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15),
    (2, 3, 4), (3, 4, 7), (1, 4, 8)
])

sparse_graph = (4, [
    (0, 1, 1), (1, 2, 2), (2, 3, 3)
])

# Dense Graph Test
n, edges = dense_graph
mst_dense, weight_dense = kruskal(n, edges)
print(f"Dense Graph MST: {mst_dense}, Total Weight: {weight_dense}")

# Sparse Graph Test
n, edges = sparse_graph
mst_sparse, weight_sparse = kruskal(n, edges)
print(f"Sparse Graph MST: {mst_sparse}, Total Weight: {weight_sparse}")

def prim(n, graph):
    # Initialize variables
    visited = [False] * n
    min_heap = [(0, 0)]  # (weight, vertex)
    mst = []
    total_weight = 0

    while min_heap:
        weight, u = heapq.heappop(min_heap)

        if visited[u]:
            continue

        visited[u] = True
        total_weight += weight

        # Add edges to the MST
        for v, w in graph[u]:
            if not visited[v]:
                heapq.heappush(min_heap, (w, v))
                mst.append((u, v, w))

    return mst, total_weight


# Example Graphs
dense_graph = [
    [(1, 10), (2, 6), (3, 5)],  # Node 0
    [(0, 10), (3, 15), (4, 8)],  # Node 1
    [(0, 6), (3, 4)],  # Node 2
    [(0, 5), (1, 15), (2, 4), (4, 7)],  # Node 3
    [(1, 8), (3, 7)]   # Node 4
]

sparse_graph = [
    [(1, 1)],  # Node 0
    [(0, 1), (2, 2)],  # Node 1
    [(1, 2), (3, 3)],  # Node 2
    [(2, 3)]   # Node 3
]

# Dense Graph Test
mst_dense, weight_dense = prim(5, dense_graph)
print(f"\nDense Graph MST: {mst_dense}, Total Weight: {weight_dense}")

# Sparse Graph Test
mst_sparse, weight_sparse = prim(4, sparse_graph)
print(f"Sparse Graph MST: {mst_sparse}, Total Weight: {weight_sparse}")
